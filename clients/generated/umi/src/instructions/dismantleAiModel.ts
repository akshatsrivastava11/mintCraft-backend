/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  expectSome,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type DismantleAiModelInstructionAccounts = {
  signer: Signer;
  aiModel?: PublicKey | Pda;
  globalState?: PublicKey | Pda;
  userConfig?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type DismantleAiModelInstructionData = {
  discriminator: Uint8Array;
  name: string;
};

export type DismantleAiModelInstructionDataArgs = { name: string };

export function getDismantleAiModelInstructionDataSerializer(): Serializer<
  DismantleAiModelInstructionDataArgs,
  DismantleAiModelInstructionData
> {
  return mapSerializer<
    DismantleAiModelInstructionDataArgs,
    any,
    DismantleAiModelInstructionData
  >(
    struct<DismantleAiModelInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['name', string()],
      ],
      { description: 'DismantleAiModelInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([118, 72, 195, 47, 67, 125, 171, 254]),
    })
  ) as Serializer<
    DismantleAiModelInstructionDataArgs,
    DismantleAiModelInstructionData
  >;
}

// Args.
export type DismantleAiModelInstructionArgs =
  DismantleAiModelInstructionDataArgs;

// Instruction.
export function dismantleAiModel(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: DismantleAiModelInstructionAccounts & DismantleAiModelInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mintCraftModelRegistry',
    '3WbdiK5An2Q5GfqQAZQ2qstSukqqMiiZy8tfydS3TvHf'
  );

  // Accounts.
  const resolvedAccounts = {
    signer: {
      index: 0,
      isWritable: false as boolean,
      value: input.signer ?? null,
    },
    aiModel: {
      index: 1,
      isWritable: true as boolean,
      value: input.aiModel ?? null,
    },
    globalState: {
      index: 2,
      isWritable: false as boolean,
      value: input.globalState ?? null,
    },
    userConfig: {
      index: 3,
      isWritable: true as boolean,
      value: input.userConfig ?? null,
    },
    systemProgram: {
      index: 4,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: DismantleAiModelInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.globalState.value) {
    resolvedAccounts.globalState.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([
          103, 108, 111, 98, 97, 108, 65, 105, 83, 116, 97, 116, 101,
        ])
      ),
    ]);
  }
  if (!resolvedAccounts.aiModel.value) {
    resolvedAccounts.aiModel.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([97, 105])),
      string().serialize(expectSome(resolvedArgs.name)),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.signer.value)
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.globalState.value)
      ),
    ]);
  }
  if (!resolvedAccounts.userConfig.value) {
    resolvedAccounts.userConfig.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([117, 115, 101, 114])),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.signer.value)
      ),
    ]);
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getDismantleAiModelInstructionDataSerializer().serialize(
    resolvedArgs as DismantleAiModelInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
