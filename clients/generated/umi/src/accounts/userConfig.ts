/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type UserConfig = Account<UserConfigAccountData>;

export type UserConfigAccountData = {
  discriminator: Uint8Array;
  user: PublicKey;
  aiModelsRegistered: bigint;
  bump: number;
};

export type UserConfigAccountDataArgs = {
  user: PublicKey;
  aiModelsRegistered: number | bigint;
  bump: number;
};

export function getUserConfigAccountDataSerializer(): Serializer<
  UserConfigAccountDataArgs,
  UserConfigAccountData
> {
  return mapSerializer<UserConfigAccountDataArgs, any, UserConfigAccountData>(
    struct<UserConfigAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['user', publicKeySerializer()],
        ['aiModelsRegistered', u64()],
        ['bump', u8()],
      ],
      { description: 'UserConfigAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([58, 201, 49, 59, 232, 236, 180, 75]),
    })
  ) as Serializer<UserConfigAccountDataArgs, UserConfigAccountData>;
}

export function deserializeUserConfig(rawAccount: RpcAccount): UserConfig {
  return deserializeAccount(rawAccount, getUserConfigAccountDataSerializer());
}

export async function fetchUserConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<UserConfig> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'UserConfig');
  return deserializeUserConfig(maybeAccount);
}

export async function safeFetchUserConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<UserConfig | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeUserConfig(maybeAccount) : null;
}

export async function fetchAllUserConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<UserConfig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'UserConfig');
    return deserializeUserConfig(maybeAccount);
  });
}

export async function safeFetchAllUserConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<UserConfig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeUserConfig(maybeAccount as RpcAccount));
}

export function getUserConfigGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mintCraftModelRegistry',
    '6pKDeeU6C4t2i6C9FnTfgiFKQM5EhNbyZNJ2jwU2DuPw'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      user: PublicKey;
      aiModelsRegistered: number | bigint;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      user: [8, publicKeySerializer()],
      aiModelsRegistered: [40, u64()],
      bump: [48, u8()],
    })
    .deserializeUsing<UserConfig>((account) => deserializeUserConfig(account))
    .whereField(
      'discriminator',
      new Uint8Array([58, 201, 49, 59, 232, 236, 180, 75])
    );
}
