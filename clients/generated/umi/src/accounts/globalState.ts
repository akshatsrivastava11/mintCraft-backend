/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type GlobalState = Account<GlobalStateAccountData>;

export type GlobalStateAccountData = {
  discriminator: Uint8Array;
  authority: PublicKey;
  totalModels: bigint;
  platformTotalFees: bigint;
  bump: number;
};

export type GlobalStateAccountDataArgs = {
  authority: PublicKey;
  totalModels: number | bigint;
  platformTotalFees: number | bigint;
  bump: number;
};

export function getGlobalStateAccountDataSerializer(): Serializer<
  GlobalStateAccountDataArgs,
  GlobalStateAccountData
> {
  return mapSerializer<GlobalStateAccountDataArgs, any, GlobalStateAccountData>(
    struct<GlobalStateAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authority', publicKeySerializer()],
        ['totalModels', u64()],
        ['platformTotalFees', u64()],
        ['bump', u8()],
      ],
      { description: 'GlobalStateAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([163, 46, 74, 168, 216, 123, 133, 98]),
    })
  ) as Serializer<GlobalStateAccountDataArgs, GlobalStateAccountData>;
}

export function deserializeGlobalState(rawAccount: RpcAccount): GlobalState {
  return deserializeAccount(rawAccount, getGlobalStateAccountDataSerializer());
}

export async function fetchGlobalState(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<GlobalState> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'GlobalState');
  return deserializeGlobalState(maybeAccount);
}

export async function safeFetchGlobalState(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<GlobalState | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeGlobalState(maybeAccount) : null;
}

export async function fetchAllGlobalState(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<GlobalState[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'GlobalState');
    return deserializeGlobalState(maybeAccount);
  });
}

export async function safeFetchAllGlobalState(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<GlobalState[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeGlobalState(maybeAccount as RpcAccount));
}

export function getGlobalStateGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mintCraftModelRegistry',
    '6pKDeeU6C4t2i6C9FnTfgiFKQM5EhNbyZNJ2jwU2DuPw'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      authority: PublicKey;
      totalModels: number | bigint;
      platformTotalFees: number | bigint;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      authority: [8, publicKeySerializer()],
      totalModels: [40, u64()],
      platformTotalFees: [48, u64()],
      bump: [56, u8()],
    })
    .deserializeUsing<GlobalState>((account) => deserializeGlobalState(account))
    .whereField(
      'discriminator',
      new Uint8Array([163, 46, 74, 168, 216, 123, 133, 98])
    );
}
