/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  bytes,
  i64,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type AiModel = Account<AiModelAccountData>;

export type AiModelAccountData = {
  discriminator: Uint8Array;
  id: bigint;
  owner: PublicKey;
  name: string;
  description: string;
  royaltyPercentage: number;
  isActive: boolean;
  createdAt: bigint;
  apiEndpoint: string;
  dismantledAt: Option<bigint>;
  bump: number;
};

export type AiModelAccountDataArgs = {
  id: number | bigint;
  owner: PublicKey;
  name: string;
  description: string;
  royaltyPercentage: number;
  isActive: boolean;
  createdAt: number | bigint;
  apiEndpoint: string;
  dismantledAt: OptionOrNullable<number | bigint>;
  bump: number;
};

export function getAiModelAccountDataSerializer(): Serializer<
  AiModelAccountDataArgs,
  AiModelAccountData
> {
  return mapSerializer<AiModelAccountDataArgs, any, AiModelAccountData>(
    struct<AiModelAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['id', i64()],
        ['owner', publicKeySerializer()],
        ['name', string()],
        ['description', string()],
        ['royaltyPercentage', u16()],
        ['isActive', bool()],
        ['createdAt', i64()],
        ['apiEndpoint', string()],
        ['dismantledAt', option(i64())],
        ['bump', u8()],
      ],
      { description: 'AiModelAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([42, 206, 111, 34, 42, 121, 50, 138]),
    })
  ) as Serializer<AiModelAccountDataArgs, AiModelAccountData>;
}

export function deserializeAiModel(rawAccount: RpcAccount): AiModel {
  return deserializeAccount(rawAccount, getAiModelAccountDataSerializer());
}

export async function fetchAiModel(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<AiModel> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'AiModel');
  return deserializeAiModel(maybeAccount);
}

export async function safeFetchAiModel(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<AiModel | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeAiModel(maybeAccount) : null;
}

export async function fetchAllAiModel(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<AiModel[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'AiModel');
    return deserializeAiModel(maybeAccount);
  });
}

export async function safeFetchAllAiModel(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<AiModel[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeAiModel(maybeAccount as RpcAccount));
}

export function getAiModelGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mintCraftModelRegistry',
    'W626GLKRRbE1rPZnNgi5kHgUUfFTiyzPqdvS196NdaZ'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      id: number | bigint;
      owner: PublicKey;
      name: string;
      description: string;
      royaltyPercentage: number;
      isActive: boolean;
      createdAt: number | bigint;
      apiEndpoint: string;
      dismantledAt: OptionOrNullable<number | bigint>;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      id: [8, i64()],
      owner: [16, publicKeySerializer()],
      name: [48, string()],
      description: [null, string()],
      royaltyPercentage: [null, u16()],
      isActive: [null, bool()],
      createdAt: [null, i64()],
      apiEndpoint: [null, string()],
      dismantledAt: [null, option(i64())],
      bump: [null, u8()],
    })
    .deserializeUsing<AiModel>((account) => deserializeAiModel(account))
    .whereField(
      'discriminator',
      new Uint8Array([42, 206, 111, 34, 42, 121, 50, 138])
    );
}
