//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const REGISTER_AI_MODEL_DISCRIMINATOR: [u8; 8] = [107, 19, 158, 224, 193, 53, 239, 167];

/// Accounts.
#[derive(Debug)]
pub struct RegisterAiModel {
      
              
          pub signer: solana_pubkey::Pubkey,
          
              
          pub ai_model: solana_pubkey::Pubkey,
          
              
          pub global_state: solana_pubkey::Pubkey,
          
              
          pub user_config: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
      }

impl RegisterAiModel {
  pub fn instruction(&self, args: RegisterAiModelInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: RegisterAiModelInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.signer,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.ai_model,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.global_state,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.user_config,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&RegisterAiModelInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::MINT_CRAFT_MODEL_REGISTRY_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct RegisterAiModelInstructionData {
            discriminator: [u8; 8],
                                    }

impl RegisterAiModelInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [107, 19, 158, 224, 193, 53, 239, 167],
                                                                                        }
  }
}

impl Default for RegisterAiModelInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct RegisterAiModelInstructionArgs {
                  pub id: i64,
                pub royalty_percentage: u16,
                pub api_endpoint: String,
                pub description: String,
                pub name: String,
      }


/// Instruction builder for `RegisterAiModel`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` signer
                ///   1. `[writable]` ai_model
          ///   2. `[]` global_state
                ///   3. `[writable]` user_config
                ///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct RegisterAiModelBuilder {
            signer: Option<solana_pubkey::Pubkey>,
                ai_model: Option<solana_pubkey::Pubkey>,
                global_state: Option<solana_pubkey::Pubkey>,
                user_config: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                        id: Option<i64>,
                royalty_percentage: Option<u16>,
                api_endpoint: Option<String>,
                description: Option<String>,
                name: Option<String>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl RegisterAiModelBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn signer(&mut self, signer: solana_pubkey::Pubkey) -> &mut Self {
                        self.signer = Some(signer);
                    self
    }
            #[inline(always)]
    pub fn ai_model(&mut self, ai_model: solana_pubkey::Pubkey) -> &mut Self {
                        self.ai_model = Some(ai_model);
                    self
    }
            #[inline(always)]
    pub fn global_state(&mut self, global_state: solana_pubkey::Pubkey) -> &mut Self {
                        self.global_state = Some(global_state);
                    self
    }
            #[inline(always)]
    pub fn user_config(&mut self, user_config: solana_pubkey::Pubkey) -> &mut Self {
                        self.user_config = Some(user_config);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn id(&mut self, id: i64) -> &mut Self {
        self.id = Some(id);
        self
      }
                #[inline(always)]
      pub fn royalty_percentage(&mut self, royalty_percentage: u16) -> &mut Self {
        self.royalty_percentage = Some(royalty_percentage);
        self
      }
                #[inline(always)]
      pub fn api_endpoint(&mut self, api_endpoint: String) -> &mut Self {
        self.api_endpoint = Some(api_endpoint);
        self
      }
                #[inline(always)]
      pub fn description(&mut self, description: String) -> &mut Self {
        self.description = Some(description);
        self
      }
                #[inline(always)]
      pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = RegisterAiModel {
                              signer: self.signer.expect("signer is not set"),
                                        ai_model: self.ai_model.expect("ai_model is not set"),
                                        global_state: self.global_state.expect("global_state is not set"),
                                        user_config: self.user_config.expect("user_config is not set"),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                      };
          let args = RegisterAiModelInstructionArgs {
                                                              id: self.id.clone().expect("id is not set"),
                                                                  royalty_percentage: self.royalty_percentage.clone().expect("royalty_percentage is not set"),
                                                                  api_endpoint: self.api_endpoint.clone().expect("api_endpoint is not set"),
                                                                  description: self.description.clone().expect("description is not set"),
                                                                  name: self.name.clone().expect("name is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `register_ai_model` CPI accounts.
  pub struct RegisterAiModelCpiAccounts<'a, 'b> {
          
                    
              pub signer: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub ai_model: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub global_state: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub user_config: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `register_ai_model` CPI instruction.
pub struct RegisterAiModelCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub signer: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub ai_model: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub global_state: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub user_config: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: RegisterAiModelInstructionArgs,
  }

impl<'a, 'b> RegisterAiModelCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: RegisterAiModelCpiAccounts<'a, 'b>,
              args: RegisterAiModelInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              signer: accounts.signer,
              ai_model: accounts.ai_model,
              global_state: accounts.global_state,
              user_config: accounts.user_config,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.signer.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.ai_model.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.global_state.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.user_config.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&RegisterAiModelInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::MINT_CRAFT_MODEL_REGISTRY_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.signer.clone());
                        account_infos.push(self.ai_model.clone());
                        account_infos.push(self.global_state.clone());
                        account_infos.push(self.user_config.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `RegisterAiModel` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` signer
                ///   1. `[writable]` ai_model
          ///   2. `[]` global_state
                ///   3. `[writable]` user_config
          ///   4. `[]` system_program
#[derive(Clone, Debug)]
pub struct RegisterAiModelCpiBuilder<'a, 'b> {
  instruction: Box<RegisterAiModelCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RegisterAiModelCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(RegisterAiModelCpiBuilderInstruction {
      __program: program,
              signer: None,
              ai_model: None,
              global_state: None,
              user_config: None,
              system_program: None,
                                            id: None,
                                royalty_percentage: None,
                                api_endpoint: None,
                                description: None,
                                name: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn signer(&mut self, signer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.signer = Some(signer);
                    self
    }
      #[inline(always)]
    pub fn ai_model(&mut self, ai_model: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.ai_model = Some(ai_model);
                    self
    }
      #[inline(always)]
    pub fn global_state(&mut self, global_state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.global_state = Some(global_state);
                    self
    }
      #[inline(always)]
    pub fn user_config(&mut self, user_config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_config = Some(user_config);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn id(&mut self, id: i64) -> &mut Self {
        self.instruction.id = Some(id);
        self
      }
                #[inline(always)]
      pub fn royalty_percentage(&mut self, royalty_percentage: u16) -> &mut Self {
        self.instruction.royalty_percentage = Some(royalty_percentage);
        self
      }
                #[inline(always)]
      pub fn api_endpoint(&mut self, api_endpoint: String) -> &mut Self {
        self.instruction.api_endpoint = Some(api_endpoint);
        self
      }
                #[inline(always)]
      pub fn description(&mut self, description: String) -> &mut Self {
        self.instruction.description = Some(description);
        self
      }
                #[inline(always)]
      pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = RegisterAiModelInstructionArgs {
                                                              id: self.instruction.id.clone().expect("id is not set"),
                                                                  royalty_percentage: self.instruction.royalty_percentage.clone().expect("royalty_percentage is not set"),
                                                                  api_endpoint: self.instruction.api_endpoint.clone().expect("api_endpoint is not set"),
                                                                  description: self.instruction.description.clone().expect("description is not set"),
                                                                  name: self.instruction.name.clone().expect("name is not set"),
                                    };
        let instruction = RegisterAiModelCpi {
        __program: self.instruction.__program,
                  
          signer: self.instruction.signer.expect("signer is not set"),
                  
          ai_model: self.instruction.ai_model.expect("ai_model is not set"),
                  
          global_state: self.instruction.global_state.expect("global_state is not set"),
                  
          user_config: self.instruction.user_config.expect("user_config is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct RegisterAiModelCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            signer: Option<&'b solana_account_info::AccountInfo<'a>>,
                ai_model: Option<&'b solana_account_info::AccountInfo<'a>>,
                global_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                user_config: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        id: Option<i64>,
                royalty_percentage: Option<u16>,
                api_endpoint: Option<String>,
                description: Option<String>,
                name: Option<String>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

