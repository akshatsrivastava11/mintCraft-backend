/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MINT_CRAFT_MODEL_REGISTRY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const REGISTER_AI_MODEL_DISCRIMINATOR = new Uint8Array([
  107, 19, 158, 224, 193, 53, 239, 167,
]);

export function getRegisterAiModelDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REGISTER_AI_MODEL_DISCRIMINATOR
  );
}

export type RegisterAiModelInstruction<
  TProgram extends string = typeof MINT_CRAFT_MODEL_REGISTRY_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountAiModel extends string | AccountMeta<string> = string,
  TAccountGlobalState extends string | AccountMeta<string> = string,
  TAccountUserConfig extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountAiModel extends string
        ? WritableAccount<TAccountAiModel>
        : TAccountAiModel,
      TAccountGlobalState extends string
        ? ReadonlyAccount<TAccountGlobalState>
        : TAccountGlobalState,
      TAccountUserConfig extends string
        ? WritableAccount<TAccountUserConfig>
        : TAccountUserConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RegisterAiModelInstructionData = {
  discriminator: ReadonlyUint8Array;
  id: bigint;
  royaltyPercentage: number;
  apiEndpoint: string;
  description: string;
  name: string;
};

export type RegisterAiModelInstructionDataArgs = {
  id: number | bigint;
  royaltyPercentage: number;
  apiEndpoint: string;
  description: string;
  name: string;
};

export function getRegisterAiModelInstructionDataEncoder(): Encoder<RegisterAiModelInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['id', getI64Encoder()],
      ['royaltyPercentage', getU16Encoder()],
      ['apiEndpoint', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: REGISTER_AI_MODEL_DISCRIMINATOR })
  );
}

export function getRegisterAiModelInstructionDataDecoder(): Decoder<RegisterAiModelInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['id', getI64Decoder()],
    ['royaltyPercentage', getU16Decoder()],
    ['apiEndpoint', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getRegisterAiModelInstructionDataCodec(): Codec<
  RegisterAiModelInstructionDataArgs,
  RegisterAiModelInstructionData
> {
  return combineCodec(
    getRegisterAiModelInstructionDataEncoder(),
    getRegisterAiModelInstructionDataDecoder()
  );
}

export type RegisterAiModelAsyncInput<
  TAccountSigner extends string = string,
  TAccountAiModel extends string = string,
  TAccountGlobalState extends string = string,
  TAccountUserConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  aiModel?: Address<TAccountAiModel>;
  globalState?: Address<TAccountGlobalState>;
  userConfig?: Address<TAccountUserConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  id: RegisterAiModelInstructionDataArgs['id'];
  royaltyPercentage: RegisterAiModelInstructionDataArgs['royaltyPercentage'];
  apiEndpoint: RegisterAiModelInstructionDataArgs['apiEndpoint'];
  description: RegisterAiModelInstructionDataArgs['description'];
  name: RegisterAiModelInstructionDataArgs['name'];
};

export async function getRegisterAiModelInstructionAsync<
  TAccountSigner extends string,
  TAccountAiModel extends string,
  TAccountGlobalState extends string,
  TAccountUserConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof MINT_CRAFT_MODEL_REGISTRY_PROGRAM_ADDRESS,
>(
  input: RegisterAiModelAsyncInput<
    TAccountSigner,
    TAccountAiModel,
    TAccountGlobalState,
    TAccountUserConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RegisterAiModelInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountAiModel,
    TAccountGlobalState,
    TAccountUserConfig,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MINT_CRAFT_MODEL_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    aiModel: { value: input.aiModel ?? null, isWritable: true },
    globalState: { value: input.globalState ?? null, isWritable: false },
    userConfig: { value: input.userConfig ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.globalState.value) {
    accounts.globalState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 108, 111, 98, 97, 108, 65, 105, 83, 116, 97, 116, 101,
          ])
        ),
      ],
    });
  }
  if (!accounts.aiModel.value) {
    accounts.aiModel.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 105])),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.name)
        ),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
        getAddressEncoder().encode(expectAddress(accounts.globalState.value)),
      ],
    });
  }
  if (!accounts.userConfig.value) {
    accounts.userConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([117, 115, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.aiModel),
      getAccountMeta(accounts.globalState),
      getAccountMeta(accounts.userConfig),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getRegisterAiModelInstructionDataEncoder().encode(
      args as RegisterAiModelInstructionDataArgs
    ),
  } as RegisterAiModelInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountAiModel,
    TAccountGlobalState,
    TAccountUserConfig,
    TAccountSystemProgram
  >;

  return instruction;
}

export type RegisterAiModelInput<
  TAccountSigner extends string = string,
  TAccountAiModel extends string = string,
  TAccountGlobalState extends string = string,
  TAccountUserConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  aiModel: Address<TAccountAiModel>;
  globalState: Address<TAccountGlobalState>;
  userConfig: Address<TAccountUserConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  id: RegisterAiModelInstructionDataArgs['id'];
  royaltyPercentage: RegisterAiModelInstructionDataArgs['royaltyPercentage'];
  apiEndpoint: RegisterAiModelInstructionDataArgs['apiEndpoint'];
  description: RegisterAiModelInstructionDataArgs['description'];
  name: RegisterAiModelInstructionDataArgs['name'];
};

export function getRegisterAiModelInstruction<
  TAccountSigner extends string,
  TAccountAiModel extends string,
  TAccountGlobalState extends string,
  TAccountUserConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof MINT_CRAFT_MODEL_REGISTRY_PROGRAM_ADDRESS,
>(
  input: RegisterAiModelInput<
    TAccountSigner,
    TAccountAiModel,
    TAccountGlobalState,
    TAccountUserConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RegisterAiModelInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountAiModel,
  TAccountGlobalState,
  TAccountUserConfig,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MINT_CRAFT_MODEL_REGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    aiModel: { value: input.aiModel ?? null, isWritable: true },
    globalState: { value: input.globalState ?? null, isWritable: false },
    userConfig: { value: input.userConfig ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.aiModel),
      getAccountMeta(accounts.globalState),
      getAccountMeta(accounts.userConfig),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getRegisterAiModelInstructionDataEncoder().encode(
      args as RegisterAiModelInstructionDataArgs
    ),
  } as RegisterAiModelInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountAiModel,
    TAccountGlobalState,
    TAccountUserConfig,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedRegisterAiModelInstruction<
  TProgram extends string = typeof MINT_CRAFT_MODEL_REGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    aiModel: TAccountMetas[1];
    globalState: TAccountMetas[2];
    userConfig: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: RegisterAiModelInstructionData;
};

export function parseRegisterAiModelInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRegisterAiModelInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      aiModel: getNextAccount(),
      globalState: getNextAccount(),
      userConfig: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRegisterAiModelInstructionDataDecoder().decode(instruction.data),
  };
}
