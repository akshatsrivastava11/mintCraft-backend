/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedDismantleAiModelInstruction,
  type ParsedInitializeGlobalStateInstruction,
  type ParsedInitializeUserInstruction,
  type ParsedRegisterAiModelInstruction,
} from '../instructions';

export const MINT_CRAFT_MODEL_REGISTRY_PROGRAM_ADDRESS =
  'W626GLKRRbE1rPZnNgi5kHgUUfFTiyzPqdvS196NdaZ' as Address<'W626GLKRRbE1rPZnNgi5kHgUUfFTiyzPqdvS196NdaZ'>;

export enum MintCraftModelRegistryAccount {
  AiModel,
  GlobalState,
  UserConfig,
}

export function identifyMintCraftModelRegistryAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MintCraftModelRegistryAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([42, 206, 111, 34, 42, 121, 50, 138])
      ),
      0
    )
  ) {
    return MintCraftModelRegistryAccount.AiModel;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([163, 46, 74, 168, 216, 123, 133, 98])
      ),
      0
    )
  ) {
    return MintCraftModelRegistryAccount.GlobalState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([58, 201, 49, 59, 232, 236, 180, 75])
      ),
      0
    )
  ) {
    return MintCraftModelRegistryAccount.UserConfig;
  }
  throw new Error(
    'The provided account could not be identified as a mintCraftModelRegistry account.'
  );
}

export enum MintCraftModelRegistryInstruction {
  DismantleAiModel,
  InitializeGlobalState,
  InitializeUser,
  RegisterAiModel,
}

export function identifyMintCraftModelRegistryInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MintCraftModelRegistryInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([118, 72, 195, 47, 67, 125, 171, 254])
      ),
      0
    )
  ) {
    return MintCraftModelRegistryInstruction.DismantleAiModel;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([246, 250, 107, 202, 148, 208, 233, 30])
      ),
      0
    )
  ) {
    return MintCraftModelRegistryInstruction.InitializeGlobalState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([130, 139, 98, 163, 205, 164, 119, 214])
      ),
      0
    )
  ) {
    return MintCraftModelRegistryInstruction.InitializeUser;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([107, 19, 158, 224, 193, 53, 239, 167])
      ),
      0
    )
  ) {
    return MintCraftModelRegistryInstruction.RegisterAiModel;
  }
  throw new Error(
    'The provided instruction could not be identified as a mintCraftModelRegistry instruction.'
  );
}

export type ParsedMintCraftModelRegistryInstruction<
  TProgram extends string = 'W626GLKRRbE1rPZnNgi5kHgUUfFTiyzPqdvS196NdaZ',
> =
  | ({
      instructionType: MintCraftModelRegistryInstruction.DismantleAiModel;
    } & ParsedDismantleAiModelInstruction<TProgram>)
  | ({
      instructionType: MintCraftModelRegistryInstruction.InitializeGlobalState;
    } & ParsedInitializeGlobalStateInstruction<TProgram>)
  | ({
      instructionType: MintCraftModelRegistryInstruction.InitializeUser;
    } & ParsedInitializeUserInstruction<TProgram>)
  | ({
      instructionType: MintCraftModelRegistryInstruction.RegisterAiModel;
    } & ParsedRegisterAiModelInstruction<TProgram>);
