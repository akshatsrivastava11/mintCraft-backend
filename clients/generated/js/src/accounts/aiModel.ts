/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const AI_MODEL_DISCRIMINATOR = new Uint8Array([
  42, 206, 111, 34, 42, 121, 50, 138,
]);

export function getAiModelDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(AI_MODEL_DISCRIMINATOR);
}

export type AiModel = {
  discriminator: ReadonlyUint8Array;
  id: bigint;
  owner: Address;
  name: string;
  description: string;
  royaltyPercentage: number;
  isActive: boolean;
  createdAt: bigint;
  apiEndpoint: string;
  dismantledAt: Option<bigint>;
  bump: number;
};

export type AiModelArgs = {
  id: number | bigint;
  owner: Address;
  name: string;
  description: string;
  royaltyPercentage: number;
  isActive: boolean;
  createdAt: number | bigint;
  apiEndpoint: string;
  dismantledAt: OptionOrNullable<number | bigint>;
  bump: number;
};

export function getAiModelEncoder(): Encoder<AiModelArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['id', getI64Encoder()],
      ['owner', getAddressEncoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['royaltyPercentage', getU16Encoder()],
      ['isActive', getBooleanEncoder()],
      ['createdAt', getI64Encoder()],
      ['apiEndpoint', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['dismantledAt', getOptionEncoder(getI64Encoder())],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: AI_MODEL_DISCRIMINATOR })
  );
}

export function getAiModelDecoder(): Decoder<AiModel> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['id', getI64Decoder()],
    ['owner', getAddressDecoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['royaltyPercentage', getU16Decoder()],
    ['isActive', getBooleanDecoder()],
    ['createdAt', getI64Decoder()],
    ['apiEndpoint', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['dismantledAt', getOptionDecoder(getI64Decoder())],
    ['bump', getU8Decoder()],
  ]);
}

export function getAiModelCodec(): Codec<AiModelArgs, AiModel> {
  return combineCodec(getAiModelEncoder(), getAiModelDecoder());
}

export function decodeAiModel<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AiModel, TAddress>;
export function decodeAiModel<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AiModel, TAddress>;
export function decodeAiModel<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<AiModel, TAddress> | MaybeAccount<AiModel, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAiModelDecoder()
  );
}

export async function fetchAiModel<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AiModel, TAddress>> {
  const maybeAccount = await fetchMaybeAiModel(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAiModel<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AiModel, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAiModel(maybeAccount);
}

export async function fetchAllAiModel(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<AiModel>[]> {
  const maybeAccounts = await fetchAllMaybeAiModel(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAiModel(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AiModel>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAiModel(maybeAccount));
}
