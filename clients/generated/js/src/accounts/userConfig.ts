/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const USER_CONFIG_DISCRIMINATOR = new Uint8Array([
  58, 201, 49, 59, 232, 236, 180, 75,
]);

export function getUserConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(USER_CONFIG_DISCRIMINATOR);
}

export type UserConfig = {
  discriminator: ReadonlyUint8Array;
  user: Address;
  aiModelsRegistered: bigint;
  bump: number;
};

export type UserConfigArgs = {
  user: Address;
  aiModelsRegistered: number | bigint;
  bump: number;
};

export function getUserConfigEncoder(): FixedSizeEncoder<UserConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['user', getAddressEncoder()],
      ['aiModelsRegistered', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: USER_CONFIG_DISCRIMINATOR })
  );
}

export function getUserConfigDecoder(): FixedSizeDecoder<UserConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['user', getAddressDecoder()],
    ['aiModelsRegistered', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getUserConfigCodec(): FixedSizeCodec<
  UserConfigArgs,
  UserConfig
> {
  return combineCodec(getUserConfigEncoder(), getUserConfigDecoder());
}

export function decodeUserConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UserConfig, TAddress>;
export function decodeUserConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UserConfig, TAddress>;
export function decodeUserConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<UserConfig, TAddress> | MaybeAccount<UserConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserConfigDecoder()
  );
}

export async function fetchUserConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UserConfig, TAddress>> {
  const maybeAccount = await fetchMaybeUserConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UserConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserConfig(maybeAccount);
}

export async function fetchAllUserConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UserConfig>[]> {
  const maybeAccounts = await fetchAllMaybeUserConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UserConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUserConfig(maybeAccount));
}
