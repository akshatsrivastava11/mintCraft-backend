//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const SUBMIT_CONTENT_DISCRIMINATOR: [u8; 8] = [83, 67, 55, 88, 192, 77, 115, 15];

/// Accounts.
#[derive(Debug)]
pub struct SubmitContent {
      
              
          pub creator: solana_pubkey::Pubkey,
          
              
          pub content_account: solana_pubkey::Pubkey,
          
              
          pub ai_model_used: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
      }

impl SubmitContent {
  pub fn instruction(&self, args: SubmitContentInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: SubmitContentInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(4+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.creator,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.content_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.ai_model_used,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&SubmitContentInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::MINT_CRAFT_NFT_PROGRAM_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct SubmitContentInstructionData {
            discriminator: [u8; 8],
                                                }

impl SubmitContentInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [83, 67, 55, 88, 192, 77, 115, 15],
                                                                                                                    }
  }
}

impl Default for SubmitContentInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct SubmitContentInstructionArgs {
                  pub id: u64,
                pub prompt: String,
                pub content_ipfs: String,
                pub metadata_ipfs: String,
                pub ai_model_used_arg: Pubkey,
                pub ai_model_royalty: u16,
                pub content_type: i64,
      }


/// Instruction builder for `SubmitContent`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` creator
                ///   1. `[writable]` content_account
          ///   2. `[]` ai_model_used
                ///   3. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct SubmitContentBuilder {
            creator: Option<solana_pubkey::Pubkey>,
                content_account: Option<solana_pubkey::Pubkey>,
                ai_model_used: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                        id: Option<u64>,
                prompt: Option<String>,
                content_ipfs: Option<String>,
                metadata_ipfs: Option<String>,
                ai_model_used_arg: Option<Pubkey>,
                ai_model_royalty: Option<u16>,
                content_type: Option<i64>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl SubmitContentBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn creator(&mut self, creator: solana_pubkey::Pubkey) -> &mut Self {
                        self.creator = Some(creator);
                    self
    }
            #[inline(always)]
    pub fn content_account(&mut self, content_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.content_account = Some(content_account);
                    self
    }
            #[inline(always)]
    pub fn ai_model_used(&mut self, ai_model_used: solana_pubkey::Pubkey) -> &mut Self {
                        self.ai_model_used = Some(ai_model_used);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn id(&mut self, id: u64) -> &mut Self {
        self.id = Some(id);
        self
      }
                #[inline(always)]
      pub fn prompt(&mut self, prompt: String) -> &mut Self {
        self.prompt = Some(prompt);
        self
      }
                #[inline(always)]
      pub fn content_ipfs(&mut self, content_ipfs: String) -> &mut Self {
        self.content_ipfs = Some(content_ipfs);
        self
      }
                #[inline(always)]
      pub fn metadata_ipfs(&mut self, metadata_ipfs: String) -> &mut Self {
        self.metadata_ipfs = Some(metadata_ipfs);
        self
      }
                #[inline(always)]
      pub fn ai_model_used_arg(&mut self, ai_model_used_arg: Pubkey) -> &mut Self {
        self.ai_model_used_arg = Some(ai_model_used_arg);
        self
      }
                #[inline(always)]
      pub fn ai_model_royalty(&mut self, ai_model_royalty: u16) -> &mut Self {
        self.ai_model_royalty = Some(ai_model_royalty);
        self
      }
                #[inline(always)]
      pub fn content_type(&mut self, content_type: i64) -> &mut Self {
        self.content_type = Some(content_type);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = SubmitContent {
                              creator: self.creator.expect("creator is not set"),
                                        content_account: self.content_account.expect("content_account is not set"),
                                        ai_model_used: self.ai_model_used.expect("ai_model_used is not set"),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                      };
          let args = SubmitContentInstructionArgs {
                                                              id: self.id.clone().expect("id is not set"),
                                                                  prompt: self.prompt.clone().expect("prompt is not set"),
                                                                  content_ipfs: self.content_ipfs.clone().expect("content_ipfs is not set"),
                                                                  metadata_ipfs: self.metadata_ipfs.clone().expect("metadata_ipfs is not set"),
                                                                  ai_model_used_arg: self.ai_model_used_arg.clone().expect("ai_model_used_arg is not set"),
                                                                  ai_model_royalty: self.ai_model_royalty.clone().expect("ai_model_royalty is not set"),
                                                                  content_type: self.content_type.clone().expect("content_type is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `submit_content` CPI accounts.
  pub struct SubmitContentCpiAccounts<'a, 'b> {
          
                    
              pub creator: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub content_account: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub ai_model_used: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `submit_content` CPI instruction.
pub struct SubmitContentCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub creator: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub content_account: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub ai_model_used: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: SubmitContentInstructionArgs,
  }

impl<'a, 'b> SubmitContentCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: SubmitContentCpiAccounts<'a, 'b>,
              args: SubmitContentInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              creator: accounts.creator,
              content_account: accounts.content_account,
              ai_model_used: accounts.ai_model_used,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(4+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.creator.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.content_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.ai_model_used.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&SubmitContentInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::MINT_CRAFT_NFT_PROGRAM_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.creator.clone());
                        account_infos.push(self.content_account.clone());
                        account_infos.push(self.ai_model_used.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `SubmitContent` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` creator
                ///   1. `[writable]` content_account
          ///   2. `[]` ai_model_used
          ///   3. `[]` system_program
#[derive(Clone, Debug)]
pub struct SubmitContentCpiBuilder<'a, 'b> {
  instruction: Box<SubmitContentCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SubmitContentCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(SubmitContentCpiBuilderInstruction {
      __program: program,
              creator: None,
              content_account: None,
              ai_model_used: None,
              system_program: None,
                                            id: None,
                                prompt: None,
                                content_ipfs: None,
                                metadata_ipfs: None,
                                ai_model_used_arg: None,
                                ai_model_royalty: None,
                                content_type: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn creator(&mut self, creator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.creator = Some(creator);
                    self
    }
      #[inline(always)]
    pub fn content_account(&mut self, content_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.content_account = Some(content_account);
                    self
    }
      #[inline(always)]
    pub fn ai_model_used(&mut self, ai_model_used: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.ai_model_used = Some(ai_model_used);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn id(&mut self, id: u64) -> &mut Self {
        self.instruction.id = Some(id);
        self
      }
                #[inline(always)]
      pub fn prompt(&mut self, prompt: String) -> &mut Self {
        self.instruction.prompt = Some(prompt);
        self
      }
                #[inline(always)]
      pub fn content_ipfs(&mut self, content_ipfs: String) -> &mut Self {
        self.instruction.content_ipfs = Some(content_ipfs);
        self
      }
                #[inline(always)]
      pub fn metadata_ipfs(&mut self, metadata_ipfs: String) -> &mut Self {
        self.instruction.metadata_ipfs = Some(metadata_ipfs);
        self
      }
                #[inline(always)]
      pub fn ai_model_used_arg(&mut self, ai_model_used_arg: Pubkey) -> &mut Self {
        self.instruction.ai_model_used_arg = Some(ai_model_used_arg);
        self
      }
                #[inline(always)]
      pub fn ai_model_royalty(&mut self, ai_model_royalty: u16) -> &mut Self {
        self.instruction.ai_model_royalty = Some(ai_model_royalty);
        self
      }
                #[inline(always)]
      pub fn content_type(&mut self, content_type: i64) -> &mut Self {
        self.instruction.content_type = Some(content_type);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = SubmitContentInstructionArgs {
                                                              id: self.instruction.id.clone().expect("id is not set"),
                                                                  prompt: self.instruction.prompt.clone().expect("prompt is not set"),
                                                                  content_ipfs: self.instruction.content_ipfs.clone().expect("content_ipfs is not set"),
                                                                  metadata_ipfs: self.instruction.metadata_ipfs.clone().expect("metadata_ipfs is not set"),
                                                                  ai_model_used_arg: self.instruction.ai_model_used_arg.clone().expect("ai_model_used_arg is not set"),
                                                                  ai_model_royalty: self.instruction.ai_model_royalty.clone().expect("ai_model_royalty is not set"),
                                                                  content_type: self.instruction.content_type.clone().expect("content_type is not set"),
                                    };
        let instruction = SubmitContentCpi {
        __program: self.instruction.__program,
                  
          creator: self.instruction.creator.expect("creator is not set"),
                  
          content_account: self.instruction.content_account.expect("content_account is not set"),
                  
          ai_model_used: self.instruction.ai_model_used.expect("ai_model_used is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct SubmitContentCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            creator: Option<&'b solana_account_info::AccountInfo<'a>>,
                content_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                ai_model_used: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        id: Option<u64>,
                prompt: Option<String>,
                content_ipfs: Option<String>,
                metadata_ipfs: Option<String>,
                ai_model_used_arg: Option<Pubkey>,
                ai_model_royalty: Option<u16>,
                content_type: Option<i64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

