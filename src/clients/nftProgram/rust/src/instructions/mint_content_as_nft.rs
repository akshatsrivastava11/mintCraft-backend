//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const MINT_CONTENT_AS_NFT_DISCRIMINATOR: [u8; 8] = [80, 232, 87, 202, 11, 234, 193, 128];

/// Accounts.
#[derive(Debug)]
pub struct MintContentAsNft {
      
              
          pub content_account: solana_pubkey::Pubkey,
          
              
          pub nft_metadata: solana_pubkey::Pubkey,
          
              
          pub mint: solana_pubkey::Pubkey,
          
              
          pub user_config: solana_pubkey::Pubkey,
          
              
          pub config: solana_pubkey::Pubkey,
          
              
          pub token_account: solana_pubkey::Pubkey,
          
              
          pub metadata: solana_pubkey::Pubkey,
          
              
          pub creator: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
          
              
          pub rent: solana_pubkey::Pubkey,
          
              
          pub token_program: solana_pubkey::Pubkey,
          
              
          pub associated_token_program: solana_pubkey::Pubkey,
          
              
          pub token_metadata_program: solana_pubkey::Pubkey,
      }

impl MintContentAsNft {
  pub fn instruction(&self, args: MintContentAsNftInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: MintContentAsNftInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(13+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.content_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.nft_metadata,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.mint,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.user_config,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.config,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.token_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.metadata,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.creator,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_metadata_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&MintContentAsNftInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::MINT_CRAFT_NFT_PROGRAM_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct MintContentAsNftInstructionData {
            discriminator: [u8; 8],
                        }

impl MintContentAsNftInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [80, 232, 87, 202, 11, 234, 193, 128],
                                                            }
  }
}

impl Default for MintContentAsNftInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct MintContentAsNftInstructionArgs {
                  pub content_id: u64,
                pub nft_name: String,
                pub nft_symbol: String,
      }


/// Instruction builder for `MintContentAsNft`.
///
/// ### Accounts:
///
                ///   0. `[writable]` content_account
                ///   1. `[writable]` nft_metadata
                ///   2. `[writable]` mint
          ///   3. `[]` user_config
          ///   4. `[]` config
                ///   5. `[writable]` token_account
                ///   6. `[writable]` metadata
                      ///   7. `[writable, signer]` creator
                ///   8. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   9. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
                ///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
                ///   11. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
                ///   12. `[optional]` token_metadata_program (default to `metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s`)
#[derive(Clone, Debug, Default)]
pub struct MintContentAsNftBuilder {
            content_account: Option<solana_pubkey::Pubkey>,
                nft_metadata: Option<solana_pubkey::Pubkey>,
                mint: Option<solana_pubkey::Pubkey>,
                user_config: Option<solana_pubkey::Pubkey>,
                config: Option<solana_pubkey::Pubkey>,
                token_account: Option<solana_pubkey::Pubkey>,
                metadata: Option<solana_pubkey::Pubkey>,
                creator: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                rent: Option<solana_pubkey::Pubkey>,
                token_program: Option<solana_pubkey::Pubkey>,
                associated_token_program: Option<solana_pubkey::Pubkey>,
                token_metadata_program: Option<solana_pubkey::Pubkey>,
                        content_id: Option<u64>,
                nft_name: Option<String>,
                nft_symbol: Option<String>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl MintContentAsNftBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn content_account(&mut self, content_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.content_account = Some(content_account);
                    self
    }
            #[inline(always)]
    pub fn nft_metadata(&mut self, nft_metadata: solana_pubkey::Pubkey) -> &mut Self {
                        self.nft_metadata = Some(nft_metadata);
                    self
    }
            #[inline(always)]
    pub fn mint(&mut self, mint: solana_pubkey::Pubkey) -> &mut Self {
                        self.mint = Some(mint);
                    self
    }
            #[inline(always)]
    pub fn user_config(&mut self, user_config: solana_pubkey::Pubkey) -> &mut Self {
                        self.user_config = Some(user_config);
                    self
    }
            #[inline(always)]
    pub fn config(&mut self, config: solana_pubkey::Pubkey) -> &mut Self {
                        self.config = Some(config);
                    self
    }
            #[inline(always)]
    pub fn token_account(&mut self, token_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_account = Some(token_account);
                    self
    }
            #[inline(always)]
    pub fn metadata(&mut self, metadata: solana_pubkey::Pubkey) -> &mut Self {
                        self.metadata = Some(metadata);
                    self
    }
            #[inline(always)]
    pub fn creator(&mut self, creator: solana_pubkey::Pubkey) -> &mut Self {
                        self.creator = Some(creator);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
#[inline(always)]
    pub fn rent(&mut self, rent: solana_pubkey::Pubkey) -> &mut Self {
                        self.rent = Some(rent);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
#[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.associated_token_program = Some(associated_token_program);
                    self
    }
            /// `[optional account, default to 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s']`
#[inline(always)]
    pub fn token_metadata_program(&mut self, token_metadata_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_metadata_program = Some(token_metadata_program);
                    self
    }
                    #[inline(always)]
      pub fn content_id(&mut self, content_id: u64) -> &mut Self {
        self.content_id = Some(content_id);
        self
      }
                #[inline(always)]
      pub fn nft_name(&mut self, nft_name: String) -> &mut Self {
        self.nft_name = Some(nft_name);
        self
      }
                #[inline(always)]
      pub fn nft_symbol(&mut self, nft_symbol: String) -> &mut Self {
        self.nft_symbol = Some(nft_symbol);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = MintContentAsNft {
                              content_account: self.content_account.expect("content_account is not set"),
                                        nft_metadata: self.nft_metadata.expect("nft_metadata is not set"),
                                        mint: self.mint.expect("mint is not set"),
                                        user_config: self.user_config.expect("user_config is not set"),
                                        config: self.config.expect("config is not set"),
                                        token_account: self.token_account.expect("token_account is not set"),
                                        metadata: self.metadata.expect("metadata is not set"),
                                        creator: self.creator.expect("creator is not set"),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                                        rent: self.rent.unwrap_or(solana_pubkey::pubkey!("SysvarRent111111111111111111111111111111111")),
                                        token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        associated_token_program: self.associated_token_program.unwrap_or(solana_pubkey::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")),
                                        token_metadata_program: self.token_metadata_program.unwrap_or(solana_pubkey::pubkey!("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")),
                      };
          let args = MintContentAsNftInstructionArgs {
                                                              content_id: self.content_id.clone().expect("content_id is not set"),
                                                                  nft_name: self.nft_name.clone().expect("nft_name is not set"),
                                                                  nft_symbol: self.nft_symbol.clone().expect("nft_symbol is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `mint_content_as_nft` CPI accounts.
  pub struct MintContentAsNftCpiAccounts<'a, 'b> {
          
                    
              pub content_account: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub nft_metadata: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub mint: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub user_config: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub config: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_account: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub metadata: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub creator: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub rent: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_metadata_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `mint_content_as_nft` CPI instruction.
pub struct MintContentAsNftCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub content_account: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub nft_metadata: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub mint: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub user_config: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub config: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_account: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub metadata: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub creator: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub rent: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_metadata_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: MintContentAsNftInstructionArgs,
  }

impl<'a, 'b> MintContentAsNftCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: MintContentAsNftCpiAccounts<'a, 'b>,
              args: MintContentAsNftInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              content_account: accounts.content_account,
              nft_metadata: accounts.nft_metadata,
              mint: accounts.mint,
              user_config: accounts.user_config,
              config: accounts.config,
              token_account: accounts.token_account,
              metadata: accounts.metadata,
              creator: accounts.creator,
              system_program: accounts.system_program,
              rent: accounts.rent,
              token_program: accounts.token_program,
              associated_token_program: accounts.associated_token_program,
              token_metadata_program: accounts.token_metadata_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(13+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.content_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.nft_metadata.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.mint.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.user_config.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.config.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.token_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.metadata.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.creator.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_metadata_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&MintContentAsNftInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::MINT_CRAFT_NFT_PROGRAM_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(14 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.content_account.clone());
                        account_infos.push(self.nft_metadata.clone());
                        account_infos.push(self.mint.clone());
                        account_infos.push(self.user_config.clone());
                        account_infos.push(self.config.clone());
                        account_infos.push(self.token_account.clone());
                        account_infos.push(self.metadata.clone());
                        account_infos.push(self.creator.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.rent.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.associated_token_program.clone());
                        account_infos.push(self.token_metadata_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `MintContentAsNft` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` content_account
                ///   1. `[writable]` nft_metadata
                ///   2. `[writable]` mint
          ///   3. `[]` user_config
          ///   4. `[]` config
                ///   5. `[writable]` token_account
                ///   6. `[writable]` metadata
                      ///   7. `[writable, signer]` creator
          ///   8. `[]` system_program
          ///   9. `[]` rent
          ///   10. `[]` token_program
          ///   11. `[]` associated_token_program
          ///   12. `[]` token_metadata_program
#[derive(Clone, Debug)]
pub struct MintContentAsNftCpiBuilder<'a, 'b> {
  instruction: Box<MintContentAsNftCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MintContentAsNftCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(MintContentAsNftCpiBuilderInstruction {
      __program: program,
              content_account: None,
              nft_metadata: None,
              mint: None,
              user_config: None,
              config: None,
              token_account: None,
              metadata: None,
              creator: None,
              system_program: None,
              rent: None,
              token_program: None,
              associated_token_program: None,
              token_metadata_program: None,
                                            content_id: None,
                                nft_name: None,
                                nft_symbol: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn content_account(&mut self, content_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.content_account = Some(content_account);
                    self
    }
      #[inline(always)]
    pub fn nft_metadata(&mut self, nft_metadata: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.nft_metadata = Some(nft_metadata);
                    self
    }
      #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mint = Some(mint);
                    self
    }
      #[inline(always)]
    pub fn user_config(&mut self, user_config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_config = Some(user_config);
                    self
    }
      #[inline(always)]
    pub fn config(&mut self, config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.config = Some(config);
                    self
    }
      #[inline(always)]
    pub fn token_account(&mut self, token_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_account = Some(token_account);
                    self
    }
      #[inline(always)]
    pub fn metadata(&mut self, metadata: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.metadata = Some(metadata);
                    self
    }
      #[inline(always)]
    pub fn creator(&mut self, creator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.creator = Some(creator);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent = Some(rent);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.associated_token_program = Some(associated_token_program);
                    self
    }
      #[inline(always)]
    pub fn token_metadata_program(&mut self, token_metadata_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_metadata_program = Some(token_metadata_program);
                    self
    }
                    #[inline(always)]
      pub fn content_id(&mut self, content_id: u64) -> &mut Self {
        self.instruction.content_id = Some(content_id);
        self
      }
                #[inline(always)]
      pub fn nft_name(&mut self, nft_name: String) -> &mut Self {
        self.instruction.nft_name = Some(nft_name);
        self
      }
                #[inline(always)]
      pub fn nft_symbol(&mut self, nft_symbol: String) -> &mut Self {
        self.instruction.nft_symbol = Some(nft_symbol);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = MintContentAsNftInstructionArgs {
                                                              content_id: self.instruction.content_id.clone().expect("content_id is not set"),
                                                                  nft_name: self.instruction.nft_name.clone().expect("nft_name is not set"),
                                                                  nft_symbol: self.instruction.nft_symbol.clone().expect("nft_symbol is not set"),
                                    };
        let instruction = MintContentAsNftCpi {
        __program: self.instruction.__program,
                  
          content_account: self.instruction.content_account.expect("content_account is not set"),
                  
          nft_metadata: self.instruction.nft_metadata.expect("nft_metadata is not set"),
                  
          mint: self.instruction.mint.expect("mint is not set"),
                  
          user_config: self.instruction.user_config.expect("user_config is not set"),
                  
          config: self.instruction.config.expect("config is not set"),
                  
          token_account: self.instruction.token_account.expect("token_account is not set"),
                  
          metadata: self.instruction.metadata.expect("metadata is not set"),
                  
          creator: self.instruction.creator.expect("creator is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          rent: self.instruction.rent.expect("rent is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          associated_token_program: self.instruction.associated_token_program.expect("associated_token_program is not set"),
                  
          token_metadata_program: self.instruction.token_metadata_program.expect("token_metadata_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct MintContentAsNftCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            content_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                nft_metadata: Option<&'b solana_account_info::AccountInfo<'a>>,
                mint: Option<&'b solana_account_info::AccountInfo<'a>>,
                user_config: Option<&'b solana_account_info::AccountInfo<'a>>,
                config: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                metadata: Option<&'b solana_account_info::AccountInfo<'a>>,
                creator: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                rent: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_metadata_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        content_id: Option<u64>,
                nft_name: Option<String>,
                nft_symbol: Option<String>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

