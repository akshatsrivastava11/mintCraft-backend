/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectSome,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type SubmitContentInstructionAccounts = {
  creator: Signer;
  contentAccount?: PublicKey | Pda;
  aiModelUsed: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type SubmitContentInstructionData = {
  discriminator: Uint8Array;
  id: bigint;
  prompt: string;
  contentIpfs: string;
  metadataIpfs: string;
  aiModelUsed: PublicKey;
  aiModelRoyalty: number;
  contentType: bigint;
};

export type SubmitContentInstructionDataArgs = {
  id: number | bigint;
  prompt: string;
  contentIpfs: string;
  metadataIpfs: string;
  aiModelUsed: PublicKey;
  aiModelRoyalty: number;
  contentType: number | bigint;
};

export function getSubmitContentInstructionDataSerializer(): Serializer<
  SubmitContentInstructionDataArgs,
  SubmitContentInstructionData
> {
  return mapSerializer<
    SubmitContentInstructionDataArgs,
    any,
    SubmitContentInstructionData
  >(
    struct<SubmitContentInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['id', u64()],
        ['prompt', string()],
        ['contentIpfs', string()],
        ['metadataIpfs', string()],
        ['aiModelUsed', publicKeySerializer()],
        ['aiModelRoyalty', u16()],
        ['contentType', i64()],
      ],
      { description: 'SubmitContentInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([83, 67, 55, 88, 192, 77, 115, 15]),
    })
  ) as Serializer<
    SubmitContentInstructionDataArgs,
    SubmitContentInstructionData
  >;
}

// Args.
export type SubmitContentInstructionArgs = SubmitContentInstructionDataArgs;

// Instruction.
export function submitContent(
  context: Pick<Context, 'eddsa' | 'programs'>,
  accounts: SubmitContentInstructionAccounts,
  args: SubmitContentInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mintCraftNftProgram',
    'FqDJgJMNxGqpR8p3A7mtp4Cyow2DiXrXFoGCL1RXYsvU'
  );

  // Accounts.
  const resolvedAccounts = {
    creator: {
      index: 0,
      isWritable: true as boolean,
      value: accounts.creator ?? null,
    },
    contentAccount: {
      index: 1,
      isWritable: true as boolean,
      value: accounts.contentAccount ?? null,
    },
    aiModelUsed: {
      index: 2,
      isWritable: false as boolean,
      value: accounts.aiModelUsed ?? null,
    },
    systemProgram: {
      index: 3,
      isWritable: false as boolean,
      value: accounts.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: SubmitContentInstructionArgs = { ...args };

  // Default values.
  if (!resolvedAccounts.contentAccount.value) {
    resolvedAccounts.contentAccount.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([99, 111, 110, 116, 101, 110, 116])),
      u64().serialize(expectSome(resolvedArgs.id)),
    ]);
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSubmitContentInstructionDataSerializer().serialize(
    resolvedArgs as SubmitContentInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
