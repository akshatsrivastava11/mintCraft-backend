/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  expectSome,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type MintContentAsNftInstructionAccounts = {
  contentAccount?: PublicKey | Pda;
  nftMetadata?: PublicKey | Pda;
  mint?: PublicKey | Pda;
  userConfig?: PublicKey | Pda;
  config?: PublicKey | Pda;
  tokenAccount?: PublicKey | Pda;
  metadata: PublicKey | Pda;
  creator: Signer;
  systemProgram?: PublicKey | Pda;
  rent?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram?: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
};

// Data.
export type MintContentAsNftInstructionData = {
  discriminator: Uint8Array;
  contentId: bigint;
  nftName: string;
  nftSymbol: string;
};

export type MintContentAsNftInstructionDataArgs = {
  contentId: number | bigint;
  nftName: string;
  nftSymbol: string;
};

export function getMintContentAsNftInstructionDataSerializer(): Serializer<
  MintContentAsNftInstructionDataArgs,
  MintContentAsNftInstructionData
> {
  return mapSerializer<
    MintContentAsNftInstructionDataArgs,
    any,
    MintContentAsNftInstructionData
  >(
    struct<MintContentAsNftInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['contentId', u64()],
        ['nftName', string()],
        ['nftSymbol', string()],
      ],
      { description: 'MintContentAsNftInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([80, 232, 87, 202, 11, 234, 193, 128]),
    })
  ) as Serializer<
    MintContentAsNftInstructionDataArgs,
    MintContentAsNftInstructionData
  >;
}

// Args.
export type MintContentAsNftInstructionArgs =
  MintContentAsNftInstructionDataArgs;

// Instruction.
export function mintContentAsNft(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: MintContentAsNftInstructionAccounts & MintContentAsNftInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mintCraftNftProgram',
    'FqDJgJMNxGqpR8p3A7mtp4Cyow2DiXrXFoGCL1RXYsvU'
  );

  // Accounts.
  const resolvedAccounts = {
    contentAccount: {
      index: 0,
      isWritable: true as boolean,
      value: input.contentAccount ?? null,
    },
    nftMetadata: {
      index: 1,
      isWritable: true as boolean,
      value: input.nftMetadata ?? null,
    },
    mint: { index: 2, isWritable: true as boolean, value: input.mint ?? null },
    userConfig: {
      index: 3,
      isWritable: false as boolean,
      value: input.userConfig ?? null,
    },
    config: {
      index: 4,
      isWritable: false as boolean,
      value: input.config ?? null,
    },
    tokenAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.tokenAccount ?? null,
    },
    metadata: {
      index: 6,
      isWritable: true as boolean,
      value: input.metadata ?? null,
    },
    creator: {
      index: 7,
      isWritable: true as boolean,
      value: input.creator ?? null,
    },
    systemProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    rent: { index: 9, isWritable: false as boolean, value: input.rent ?? null },
    tokenProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 11,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    tokenMetadataProgram: {
      index: 12,
      isWritable: false as boolean,
      value: input.tokenMetadataProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: MintContentAsNftInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.contentAccount.value) {
    resolvedAccounts.contentAccount.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([99, 111, 110, 116, 101, 110, 116])),
      u64().serialize(expectSome(resolvedArgs.contentId)),
    ]);
  }
  if (!resolvedAccounts.nftMetadata.value) {
    resolvedAccounts.nftMetadata.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([110, 102, 116, 95, 109, 101, 116, 97, 100, 97, 116, 97])
      ),
      u64().serialize(expectSome(resolvedArgs.contentId)),
    ]);
  }
  if (!resolvedAccounts.mint.value) {
    resolvedAccounts.mint.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([109, 105, 110, 116])),
      u64().serialize(expectSome(resolvedArgs.contentId)),
    ]);
  }
  if (!resolvedAccounts.config.value) {
    resolvedAccounts.config.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([99, 111, 110, 102, 105, 103])),
    ]);
  }
  if (!resolvedAccounts.userConfig.value) {
    resolvedAccounts.userConfig.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([117, 115, 101, 114, 95, 99, 111, 110, 102, 105, 103])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.config.value)
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.creator.value)
      ),
    ]);
  }
  if (!resolvedAccounts.tokenAccount.value) {
    resolvedAccounts.tokenAccount.value = context.eddsa.findPda(
      context.programs.getPublicKey(
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      ),
      [
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.creator.value)
        ),
        bytes().serialize(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.mint.value)
        ),
      ]
    );
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.rent.value) {
    resolvedAccounts.rent.value = context.programs.getPublicKey(
      'rent',
      'SysvarRent111111111111111111111111111111111'
    );
    resolvedAccounts.rent.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'tokenProgram',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value =
      context.programs.getPublicKey(
        'associatedTokenProgram',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      );
    resolvedAccounts.associatedTokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenMetadataProgram.value) {
    resolvedAccounts.tokenMetadataProgram.value = context.programs.getPublicKey(
      'tokenMetadataProgram',
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    );
    resolvedAccounts.tokenMetadataProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getMintContentAsNftInstructionDataSerializer().serialize(
    resolvedArgs as MintContentAsNftInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
