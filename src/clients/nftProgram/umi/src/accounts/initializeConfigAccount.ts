/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type InitializeConfigAccount =
  Account<InitializeConfigAccountAccountData>;

export type InitializeConfigAccountAccountData = {
  discriminator: Uint8Array;
  authority: PublicKey;
  platformFees: number;
  bump: number;
};

export type InitializeConfigAccountAccountDataArgs = {
  authority: PublicKey;
  platformFees: number;
  bump: number;
};

export function getInitializeConfigAccountAccountDataSerializer(): Serializer<
  InitializeConfigAccountAccountDataArgs,
  InitializeConfigAccountAccountData
> {
  return mapSerializer<
    InitializeConfigAccountAccountDataArgs,
    any,
    InitializeConfigAccountAccountData
  >(
    struct<InitializeConfigAccountAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authority', publicKeySerializer()],
        ['platformFees', u8()],
        ['bump', u8()],
      ],
      { description: 'InitializeConfigAccountAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([184, 87, 31, 43, 99, 246, 53, 28]),
    })
  ) as Serializer<
    InitializeConfigAccountAccountDataArgs,
    InitializeConfigAccountAccountData
  >;
}

export function deserializeInitializeConfigAccount(
  rawAccount: RpcAccount
): InitializeConfigAccount {
  return deserializeAccount(
    rawAccount,
    getInitializeConfigAccountAccountDataSerializer()
  );
}

export async function fetchInitializeConfigAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<InitializeConfigAccount> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'InitializeConfigAccount');
  return deserializeInitializeConfigAccount(maybeAccount);
}

export async function safeFetchInitializeConfigAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<InitializeConfigAccount | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeInitializeConfigAccount(maybeAccount)
    : null;
}

export async function fetchAllInitializeConfigAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<InitializeConfigAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'InitializeConfigAccount');
    return deserializeInitializeConfigAccount(maybeAccount);
  });
}

export async function safeFetchAllInitializeConfigAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<InitializeConfigAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeInitializeConfigAccount(maybeAccount as RpcAccount)
    );
}

export function getInitializeConfigAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mintCraftNftProgram',
    'BrrVsyYH1Ght4cZwZYuWNY7659skft5wYHYrxPndgKQv'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      authority: PublicKey;
      platformFees: number;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      authority: [8, publicKeySerializer()],
      platformFees: [40, u8()],
      bump: [41, u8()],
    })
    .deserializeUsing<InitializeConfigAccount>((account) =>
      deserializeInitializeConfigAccount(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([184, 87, 31, 43, 99, 246, 53, 28])
    );
}
