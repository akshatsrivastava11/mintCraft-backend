/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  bytes,
  i64,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
  u64,
} from '@metaplex-foundation/umi/serializers';

export type ContentAccount = Account<ContentAccountAccountData>;

export type ContentAccountAccountData = {
  discriminator: Uint8Array;
  id: bigint;
  creator: PublicKey;
  prompt: string;
  contentIpfs: string;
  metadataIpfs: string;
  aiModelUsed: PublicKey;
  aiModelRoyalty: number;
  generationTimeStamp: bigint;
  mint: Option<PublicKey>;
  contentType: bigint;
  isMinted: boolean;
  mintAddressAta: Option<PublicKey>;
};

export type ContentAccountAccountDataArgs = {
  id: number | bigint;
  creator: PublicKey;
  prompt: string;
  contentIpfs: string;
  metadataIpfs: string;
  aiModelUsed: PublicKey;
  aiModelRoyalty: number;
  generationTimeStamp: number | bigint;
  mint: OptionOrNullable<PublicKey>;
  contentType: number | bigint;
  isMinted: boolean;
  mintAddressAta: OptionOrNullable<PublicKey>;
};

export function getContentAccountAccountDataSerializer(): Serializer<
  ContentAccountAccountDataArgs,
  ContentAccountAccountData
> {
  return mapSerializer<
    ContentAccountAccountDataArgs,
    any,
    ContentAccountAccountData
  >(
    struct<ContentAccountAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['id', u64()],
        ['creator', publicKeySerializer()],
        ['prompt', string()],
        ['contentIpfs', string()],
        ['metadataIpfs', string()],
        ['aiModelUsed', publicKeySerializer()],
        ['aiModelRoyalty', u16()],
        ['generationTimeStamp', i64()],
        ['mint', option(publicKeySerializer())],
        ['contentType', i64()],
        ['isMinted', bool()],
        ['mintAddressAta', option(publicKeySerializer())],
      ],
      { description: 'ContentAccountAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([189, 25, 152, 128, 54, 178, 15, 232]),
    })
  ) as Serializer<ContentAccountAccountDataArgs, ContentAccountAccountData>;
}

export function deserializeContentAccount(
  rawAccount: RpcAccount
): ContentAccount {
  return deserializeAccount(
    rawAccount,
    getContentAccountAccountDataSerializer()
  );
}

export async function fetchContentAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ContentAccount> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'ContentAccount');
  return deserializeContentAccount(maybeAccount);
}

export async function safeFetchContentAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ContentAccount | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeContentAccount(maybeAccount) : null;
}

export async function fetchAllContentAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ContentAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ContentAccount');
    return deserializeContentAccount(maybeAccount);
  });
}

export async function safeFetchAllContentAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ContentAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeContentAccount(maybeAccount as RpcAccount)
    );
}

export function getContentAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mintCraftNftProgram',
    'BrrVsyYH1Ght4cZwZYuWNY7659skft5wYHYrxPndgKQv'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      id: number | bigint;
      creator: PublicKey;
      prompt: string;
      contentIpfs: string;
      metadataIpfs: string;
      aiModelUsed: PublicKey;
      aiModelRoyalty: number;
      generationTimeStamp: number | bigint;
      mint: OptionOrNullable<PublicKey>;
      contentType: number | bigint;
      isMinted: boolean;
      mintAddressAta: OptionOrNullable<PublicKey>;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      id: [8, u64()],
      creator: [16, publicKeySerializer()],
      prompt: [48, string()],
      contentIpfs: [null, string()],
      metadataIpfs: [null, string()],
      aiModelUsed: [null, publicKeySerializer()],
      aiModelRoyalty: [null, u16()],
      generationTimeStamp: [null, i64()],
      mint: [null, option(publicKeySerializer())],
      contentType: [null, i64()],
      isMinted: [null, bool()],
      mintAddressAta: [null, option(publicKeySerializer())],
    })
    .deserializeUsing<ContentAccount>((account) =>
      deserializeContentAccount(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([189, 25, 152, 128, 54, 178, 15, 232])
    );
}
