/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  bytes,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
} from '@metaplex-foundation/umi/serializers';

export type NftMetadata = Account<NftMetadataAccountData>;

export type NftMetadataAccountData = {
  discriminator: Uint8Array;
  owner: PublicKey;
  contentId: PublicKey;
  mint: PublicKey;
  name: string;
  symbol: string;
  metadataUri: string;
  aiModelUsed: PublicKey;
  creatorRoyalty: number;
  isMutable: boolean;
  verified: boolean;
  mintedAt: bigint;
};

export type NftMetadataAccountDataArgs = {
  owner: PublicKey;
  contentId: PublicKey;
  mint: PublicKey;
  name: string;
  symbol: string;
  metadataUri: string;
  aiModelUsed: PublicKey;
  creatorRoyalty: number;
  isMutable: boolean;
  verified: boolean;
  mintedAt: number | bigint;
};

export function getNftMetadataAccountDataSerializer(): Serializer<
  NftMetadataAccountDataArgs,
  NftMetadataAccountData
> {
  return mapSerializer<NftMetadataAccountDataArgs, any, NftMetadataAccountData>(
    struct<NftMetadataAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['owner', publicKeySerializer()],
        ['contentId', publicKeySerializer()],
        ['mint', publicKeySerializer()],
        ['name', string()],
        ['symbol', string()],
        ['metadataUri', string()],
        ['aiModelUsed', publicKeySerializer()],
        ['creatorRoyalty', u16()],
        ['isMutable', bool()],
        ['verified', bool()],
        ['mintedAt', i64()],
      ],
      { description: 'NftMetadataAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([132, 242, 200, 112, 117, 170, 48, 7]),
    })
  ) as Serializer<NftMetadataAccountDataArgs, NftMetadataAccountData>;
}

export function deserializeNftMetadata(rawAccount: RpcAccount): NftMetadata {
  return deserializeAccount(rawAccount, getNftMetadataAccountDataSerializer());
}

export async function fetchNftMetadata(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<NftMetadata> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'NftMetadata');
  return deserializeNftMetadata(maybeAccount);
}

export async function safeFetchNftMetadata(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<NftMetadata | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeNftMetadata(maybeAccount) : null;
}

export async function fetchAllNftMetadata(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<NftMetadata[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'NftMetadata');
    return deserializeNftMetadata(maybeAccount);
  });
}

export async function safeFetchAllNftMetadata(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<NftMetadata[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeNftMetadata(maybeAccount as RpcAccount));
}

export function getNftMetadataGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mintCraftNftProgram',
    'FqDJgJMNxGqpR8p3A7mtp4Cyow2DiXrXFoGCL1RXYsvU'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      owner: PublicKey;
      contentId: PublicKey;
      mint: PublicKey;
      name: string;
      symbol: string;
      metadataUri: string;
      aiModelUsed: PublicKey;
      creatorRoyalty: number;
      isMutable: boolean;
      verified: boolean;
      mintedAt: number | bigint;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      owner: [8, publicKeySerializer()],
      contentId: [40, publicKeySerializer()],
      mint: [72, publicKeySerializer()],
      name: [104, string()],
      symbol: [null, string()],
      metadataUri: [null, string()],
      aiModelUsed: [null, publicKeySerializer()],
      creatorRoyalty: [null, u16()],
      isMutable: [null, bool()],
      verified: [null, bool()],
      mintedAt: [null, i64()],
    })
    .deserializeUsing<NftMetadata>((account) => deserializeNftMetadata(account))
    .whereField(
      'discriminator',
      new Uint8Array([132, 242, 200, 112, 117, 170, 48, 7])
    );
}
