/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_USER_DISCRIMINATOR = new Uint8Array([
  111, 17, 185, 250, 60, 122, 38, 254,
]);

export function getInitializeUserDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_USER_DISCRIMINATOR
  );
}

export type InitializeUserInstruction<
  TProgram extends string = typeof MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountUserConfig extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountUserConfig extends string
        ? WritableAccount<TAccountUserConfig>
        : TAccountUserConfig,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeUserInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeUserInstructionDataArgs = {};

export function getInitializeUserInstructionDataEncoder(): FixedSizeEncoder<InitializeUserInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INITIALIZE_USER_DISCRIMINATOR })
  );
}

export function getInitializeUserInstructionDataDecoder(): FixedSizeDecoder<InitializeUserInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeUserInstructionDataCodec(): FixedSizeCodec<
  InitializeUserInstructionDataArgs,
  InitializeUserInstructionData
> {
  return combineCodec(
    getInitializeUserInstructionDataEncoder(),
    getInitializeUserInstructionDataDecoder()
  );
}

export type InitializeUserAsyncInput<
  TAccountUser extends string = string,
  TAccountUserConfig extends string = string,
  TAccountConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  userConfig?: Address<TAccountUserConfig>;
  config?: Address<TAccountConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeUserInstructionAsync<
  TAccountUser extends string,
  TAccountUserConfig extends string,
  TAccountConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeUserAsyncInput<
    TAccountUser,
    TAccountUserConfig,
    TAccountConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeUserInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountUserConfig,
    TAccountConfig,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    userConfig: { value: input.userConfig ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }
  if (!accounts.userConfig.value) {
    accounts.userConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([117, 115, 101, 114, 95, 99, 111, 110, 102, 105, 103])
        ),
        getAddressEncoder().encode(expectAddress(accounts.config.value)),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userConfig),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeUserInstructionDataEncoder().encode({}),
  } as InitializeUserInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountUserConfig,
    TAccountConfig,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeUserInput<
  TAccountUser extends string = string,
  TAccountUserConfig extends string = string,
  TAccountConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  userConfig: Address<TAccountUserConfig>;
  config: Address<TAccountConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeUserInstruction<
  TAccountUser extends string,
  TAccountUserConfig extends string,
  TAccountConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeUserInput<
    TAccountUser,
    TAccountUserConfig,
    TAccountConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeUserInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountUserConfig,
  TAccountConfig,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    userConfig: { value: input.userConfig ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.userConfig),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeUserInstructionDataEncoder().encode({}),
  } as InitializeUserInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountUserConfig,
    TAccountConfig,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeUserInstruction<
  TProgram extends string = typeof MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    userConfig: TAccountMetas[1];
    config: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: InitializeUserInstructionData;
};

export function parseInitializeUserInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeUserInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      userConfig: getNextAccount(),
      config: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeUserInstructionDataDecoder().decode(instruction.data),
  };
}
