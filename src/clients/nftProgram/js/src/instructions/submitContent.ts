/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const SUBMIT_CONTENT_DISCRIMINATOR = new Uint8Array([
  83, 67, 55, 88, 192, 77, 115, 15,
]);

export function getSubmitContentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SUBMIT_CONTENT_DISCRIMINATOR
  );
}

export type SubmitContentInstruction<
  TProgram extends string = typeof MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountContentAccount extends string | AccountMeta<string> = string,
  TAccountAiModelUsed extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountContentAccount extends string
        ? WritableAccount<TAccountContentAccount>
        : TAccountContentAccount,
      TAccountAiModelUsed extends string
        ? ReadonlyAccount<TAccountAiModelUsed>
        : TAccountAiModelUsed,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SubmitContentInstructionData = {
  discriminator: ReadonlyUint8Array;
  id: bigint;
  prompt: string;
  contentIpfs: string;
  metadataIpfs: string;
  aiModelUsed: Address;
  aiModelRoyalty: number;
  contentType: bigint;
};

export type SubmitContentInstructionDataArgs = {
  id: number | bigint;
  prompt: string;
  contentIpfs: string;
  metadataIpfs: string;
  aiModelUsed: Address;
  aiModelRoyalty: number;
  contentType: number | bigint;
};

export function getSubmitContentInstructionDataEncoder(): Encoder<SubmitContentInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['id', getU64Encoder()],
      ['prompt', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['contentIpfs', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['metadataIpfs', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['aiModelUsed', getAddressEncoder()],
      ['aiModelRoyalty', getU16Encoder()],
      ['contentType', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SUBMIT_CONTENT_DISCRIMINATOR })
  );
}

export function getSubmitContentInstructionDataDecoder(): Decoder<SubmitContentInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['id', getU64Decoder()],
    ['prompt', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['contentIpfs', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['metadataIpfs', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['aiModelUsed', getAddressDecoder()],
    ['aiModelRoyalty', getU16Decoder()],
    ['contentType', getI64Decoder()],
  ]);
}

export function getSubmitContentInstructionDataCodec(): Codec<
  SubmitContentInstructionDataArgs,
  SubmitContentInstructionData
> {
  return combineCodec(
    getSubmitContentInstructionDataEncoder(),
    getSubmitContentInstructionDataDecoder()
  );
}

export type SubmitContentAsyncInput<
  TAccountCreator extends string = string,
  TAccountContentAccount extends string = string,
  TAccountAiModelUsed extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  creator: TransactionSigner<TAccountCreator>;
  contentAccount?: Address<TAccountContentAccount>;
  aiModelUsed: Address<TAccountAiModelUsed>;
  systemProgram?: Address<TAccountSystemProgram>;
  id: SubmitContentInstructionDataArgs['id'];
  prompt: SubmitContentInstructionDataArgs['prompt'];
  contentIpfs: SubmitContentInstructionDataArgs['contentIpfs'];
  metadataIpfs: SubmitContentInstructionDataArgs['metadataIpfs'];
  aiModelUsedArg: SubmitContentInstructionDataArgs['aiModelUsed'];
  aiModelRoyalty: SubmitContentInstructionDataArgs['aiModelRoyalty'];
  contentType: SubmitContentInstructionDataArgs['contentType'];
};

export async function getSubmitContentInstructionAsync<
  TAccountCreator extends string,
  TAccountContentAccount extends string,
  TAccountAiModelUsed extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS,
>(
  input: SubmitContentAsyncInput<
    TAccountCreator,
    TAccountContentAccount,
    TAccountAiModelUsed,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SubmitContentInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountContentAccount,
    TAccountAiModelUsed,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    contentAccount: { value: input.contentAccount ?? null, isWritable: true },
    aiModelUsed: { value: input.aiModelUsed ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input, aiModelUsed: input.aiModelUsedArg };

  // Resolve default values.
  if (!accounts.contentAccount.value) {
    accounts.contentAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 111, 110, 116, 101, 110, 116])
        ),
        getU64Encoder().encode(expectSome(args.id)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.contentAccount),
      getAccountMeta(accounts.aiModelUsed),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSubmitContentInstructionDataEncoder().encode(
      args as SubmitContentInstructionDataArgs
    ),
  } as SubmitContentInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountContentAccount,
    TAccountAiModelUsed,
    TAccountSystemProgram
  >;

  return instruction;
}

export type SubmitContentInput<
  TAccountCreator extends string = string,
  TAccountContentAccount extends string = string,
  TAccountAiModelUsed extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  creator: TransactionSigner<TAccountCreator>;
  contentAccount: Address<TAccountContentAccount>;
  aiModelUsed: Address<TAccountAiModelUsed>;
  systemProgram?: Address<TAccountSystemProgram>;
  id: SubmitContentInstructionDataArgs['id'];
  prompt: SubmitContentInstructionDataArgs['prompt'];
  contentIpfs: SubmitContentInstructionDataArgs['contentIpfs'];
  metadataIpfs: SubmitContentInstructionDataArgs['metadataIpfs'];
  aiModelUsedArg: SubmitContentInstructionDataArgs['aiModelUsed'];
  aiModelRoyalty: SubmitContentInstructionDataArgs['aiModelRoyalty'];
  contentType: SubmitContentInstructionDataArgs['contentType'];
};

export function getSubmitContentInstruction<
  TAccountCreator extends string,
  TAccountContentAccount extends string,
  TAccountAiModelUsed extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS,
>(
  input: SubmitContentInput<
    TAccountCreator,
    TAccountContentAccount,
    TAccountAiModelUsed,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SubmitContentInstruction<
  TProgramAddress,
  TAccountCreator,
  TAccountContentAccount,
  TAccountAiModelUsed,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    creator: { value: input.creator ?? null, isWritable: true },
    contentAccount: { value: input.contentAccount ?? null, isWritable: true },
    aiModelUsed: { value: input.aiModelUsed ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input, aiModelUsed: input.aiModelUsedArg };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.contentAccount),
      getAccountMeta(accounts.aiModelUsed),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSubmitContentInstructionDataEncoder().encode(
      args as SubmitContentInstructionDataArgs
    ),
  } as SubmitContentInstruction<
    TProgramAddress,
    TAccountCreator,
    TAccountContentAccount,
    TAccountAiModelUsed,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSubmitContentInstruction<
  TProgram extends string = typeof MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    creator: TAccountMetas[0];
    contentAccount: TAccountMetas[1];
    aiModelUsed: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: SubmitContentInstructionData;
};

export function parseSubmitContentInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSubmitContentInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      creator: getNextAccount(),
      contentAccount: getNextAccount(),
      aiModelUsed: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSubmitContentInstructionDataDecoder().decode(instruction.data),
  };
}
