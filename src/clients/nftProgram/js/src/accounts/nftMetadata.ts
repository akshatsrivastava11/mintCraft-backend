/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const NFT_METADATA_DISCRIMINATOR = new Uint8Array([
  132, 242, 200, 112, 117, 170, 48, 7,
]);

export function getNftMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    NFT_METADATA_DISCRIMINATOR
  );
}

export type NftMetadata = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
  contentId: Address;
  mint: Address;
  name: string;
  symbol: string;
  metadataUri: string;
  aiModelUsed: Address;
  creatorRoyalty: number;
  isMutable: boolean;
  verified: boolean;
  mintedAt: bigint;
};

export type NftMetadataArgs = {
  owner: Address;
  contentId: Address;
  mint: Address;
  name: string;
  symbol: string;
  metadataUri: string;
  aiModelUsed: Address;
  creatorRoyalty: number;
  isMutable: boolean;
  verified: boolean;
  mintedAt: number | bigint;
};

export function getNftMetadataEncoder(): Encoder<NftMetadataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['contentId', getAddressEncoder()],
      ['mint', getAddressEncoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['symbol', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['metadataUri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['aiModelUsed', getAddressEncoder()],
      ['creatorRoyalty', getU16Encoder()],
      ['isMutable', getBooleanEncoder()],
      ['verified', getBooleanEncoder()],
      ['mintedAt', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: NFT_METADATA_DISCRIMINATOR })
  );
}

export function getNftMetadataDecoder(): Decoder<NftMetadata> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['contentId', getAddressDecoder()],
    ['mint', getAddressDecoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['symbol', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['metadataUri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['aiModelUsed', getAddressDecoder()],
    ['creatorRoyalty', getU16Decoder()],
    ['isMutable', getBooleanDecoder()],
    ['verified', getBooleanDecoder()],
    ['mintedAt', getI64Decoder()],
  ]);
}

export function getNftMetadataCodec(): Codec<NftMetadataArgs, NftMetadata> {
  return combineCodec(getNftMetadataEncoder(), getNftMetadataDecoder());
}

export function decodeNftMetadata<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<NftMetadata, TAddress>;
export function decodeNftMetadata<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<NftMetadata, TAddress>;
export function decodeNftMetadata<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<NftMetadata, TAddress> | MaybeAccount<NftMetadata, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getNftMetadataDecoder()
  );
}

export async function fetchNftMetadata<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<NftMetadata, TAddress>> {
  const maybeAccount = await fetchMaybeNftMetadata(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeNftMetadata<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<NftMetadata, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeNftMetadata(maybeAccount);
}

export async function fetchAllNftMetadata(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<NftMetadata>[]> {
  const maybeAccounts = await fetchAllMaybeNftMetadata(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeNftMetadata(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<NftMetadata>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeNftMetadata(maybeAccount));
}
