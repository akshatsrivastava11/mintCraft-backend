/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const CONTENT_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  189, 25, 152, 128, 54, 178, 15, 232,
]);

export function getContentAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CONTENT_ACCOUNT_DISCRIMINATOR
  );
}

export type ContentAccount = {
  discriminator: ReadonlyUint8Array;
  id: bigint;
  creator: Address;
  prompt: string;
  contentIpfs: string;
  metadataIpfs: string;
  aiModelUsed: Address;
  aiModelRoyalty: number;
  generationTimeStamp: bigint;
  mint: Option<Address>;
  contentType: bigint;
  isMinted: boolean;
  mintAddressAta: Option<Address>;
};

export type ContentAccountArgs = {
  id: number | bigint;
  creator: Address;
  prompt: string;
  contentIpfs: string;
  metadataIpfs: string;
  aiModelUsed: Address;
  aiModelRoyalty: number;
  generationTimeStamp: number | bigint;
  mint: OptionOrNullable<Address>;
  contentType: number | bigint;
  isMinted: boolean;
  mintAddressAta: OptionOrNullable<Address>;
};

export function getContentAccountEncoder(): Encoder<ContentAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['id', getU64Encoder()],
      ['creator', getAddressEncoder()],
      ['prompt', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['contentIpfs', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['metadataIpfs', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['aiModelUsed', getAddressEncoder()],
      ['aiModelRoyalty', getU16Encoder()],
      ['generationTimeStamp', getI64Encoder()],
      ['mint', getOptionEncoder(getAddressEncoder())],
      ['contentType', getI64Encoder()],
      ['isMinted', getBooleanEncoder()],
      ['mintAddressAta', getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: CONTENT_ACCOUNT_DISCRIMINATOR })
  );
}

export function getContentAccountDecoder(): Decoder<ContentAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['id', getU64Decoder()],
    ['creator', getAddressDecoder()],
    ['prompt', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['contentIpfs', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['metadataIpfs', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['aiModelUsed', getAddressDecoder()],
    ['aiModelRoyalty', getU16Decoder()],
    ['generationTimeStamp', getI64Decoder()],
    ['mint', getOptionDecoder(getAddressDecoder())],
    ['contentType', getI64Decoder()],
    ['isMinted', getBooleanDecoder()],
    ['mintAddressAta', getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getContentAccountCodec(): Codec<
  ContentAccountArgs,
  ContentAccount
> {
  return combineCodec(getContentAccountEncoder(), getContentAccountDecoder());
}

export function decodeContentAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ContentAccount, TAddress>;
export function decodeContentAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ContentAccount, TAddress>;
export function decodeContentAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ContentAccount, TAddress> | MaybeAccount<ContentAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getContentAccountDecoder()
  );
}

export async function fetchContentAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ContentAccount, TAddress>> {
  const maybeAccount = await fetchMaybeContentAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeContentAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ContentAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeContentAccount(maybeAccount);
}

export async function fetchAllContentAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ContentAccount>[]> {
  const maybeAccounts = await fetchAllMaybeContentAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeContentAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ContentAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeContentAccount(maybeAccount)
  );
}
