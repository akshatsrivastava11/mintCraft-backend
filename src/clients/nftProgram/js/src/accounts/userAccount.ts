/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const USER_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  211, 33, 136, 16, 186, 110, 242, 127,
]);

export function getUserAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    USER_ACCOUNT_DISCRIMINATOR
  );
}

export type UserAccount = {
  discriminator: ReadonlyUint8Array;
  user: Address;
  nftMinted: bigint;
  bump: number;
};

export type UserAccountArgs = {
  user: Address;
  nftMinted: number | bigint;
  bump: number;
};

export function getUserAccountEncoder(): FixedSizeEncoder<UserAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['user', getAddressEncoder()],
      ['nftMinted', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: USER_ACCOUNT_DISCRIMINATOR })
  );
}

export function getUserAccountDecoder(): FixedSizeDecoder<UserAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['user', getAddressDecoder()],
    ['nftMinted', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getUserAccountCodec(): FixedSizeCodec<
  UserAccountArgs,
  UserAccount
> {
  return combineCodec(getUserAccountEncoder(), getUserAccountDecoder());
}

export function decodeUserAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UserAccount, TAddress>;
export function decodeUserAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UserAccount, TAddress>;
export function decodeUserAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<UserAccount, TAddress> | MaybeAccount<UserAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserAccountDecoder()
  );
}

export async function fetchUserAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UserAccount, TAddress>> {
  const maybeAccount = await fetchMaybeUserAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UserAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserAccount(maybeAccount);
}

export async function fetchAllUserAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UserAccount>[]> {
  const maybeAccounts = await fetchAllMaybeUserAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UserAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUserAccount(maybeAccount));
}
