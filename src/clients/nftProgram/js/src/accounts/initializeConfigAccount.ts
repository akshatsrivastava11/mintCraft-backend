/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const INITIALIZE_CONFIG_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  184, 87, 31, 43, 99, 246, 53, 28,
]);

export function getInitializeConfigAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_CONFIG_ACCOUNT_DISCRIMINATOR
  );
}

export type InitializeConfigAccount = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  platformFees: number;
  bump: number;
};

export type InitializeConfigAccountArgs = {
  authority: Address;
  platformFees: number;
  bump: number;
};

export function getInitializeConfigAccountEncoder(): FixedSizeEncoder<InitializeConfigAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['platformFees', getU8Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_CONFIG_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getInitializeConfigAccountDecoder(): FixedSizeDecoder<InitializeConfigAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['platformFees', getU8Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getInitializeConfigAccountCodec(): FixedSizeCodec<
  InitializeConfigAccountArgs,
  InitializeConfigAccount
> {
  return combineCodec(
    getInitializeConfigAccountEncoder(),
    getInitializeConfigAccountDecoder()
  );
}

export function decodeInitializeConfigAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<InitializeConfigAccount, TAddress>;
export function decodeInitializeConfigAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<InitializeConfigAccount, TAddress>;
export function decodeInitializeConfigAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<InitializeConfigAccount, TAddress>
  | MaybeAccount<InitializeConfigAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getInitializeConfigAccountDecoder()
  );
}

export async function fetchInitializeConfigAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<InitializeConfigAccount, TAddress>> {
  const maybeAccount = await fetchMaybeInitializeConfigAccount(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeInitializeConfigAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<InitializeConfigAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeInitializeConfigAccount(maybeAccount);
}

export async function fetchAllInitializeConfigAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<InitializeConfigAccount>[]> {
  const maybeAccounts = await fetchAllMaybeInitializeConfigAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeInitializeConfigAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<InitializeConfigAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeInitializeConfigAccount(maybeAccount)
  );
}
