/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedInitializeConfigInstruction,
  type ParsedInitializeUserInstruction,
  type ParsedMintContentAsNftInstruction,
  type ParsedSubmitContentInstruction,
} from '../instructions';

export const MINT_CRAFT_NFT_PROGRAM_PROGRAM_ADDRESS =
  'BrrVsyYH1Ght4cZwZYuWNY7659skft5wYHYrxPndgKQv' as Address<'BrrVsyYH1Ght4cZwZYuWNY7659skft5wYHYrxPndgKQv'>;

export enum MintCraftNftProgramAccount {
  ContentAccount,
  InitializeConfigAccount,
  NftMetadata,
  UserAccount,
}

export function identifyMintCraftNftProgramAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MintCraftNftProgramAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([189, 25, 152, 128, 54, 178, 15, 232])
      ),
      0
    )
  ) {
    return MintCraftNftProgramAccount.ContentAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([184, 87, 31, 43, 99, 246, 53, 28])
      ),
      0
    )
  ) {
    return MintCraftNftProgramAccount.InitializeConfigAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([132, 242, 200, 112, 117, 170, 48, 7])
      ),
      0
    )
  ) {
    return MintCraftNftProgramAccount.NftMetadata;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([211, 33, 136, 16, 186, 110, 242, 127])
      ),
      0
    )
  ) {
    return MintCraftNftProgramAccount.UserAccount;
  }
  throw new Error(
    'The provided account could not be identified as a mintCraftNftProgram account.'
  );
}

export enum MintCraftNftProgramInstruction {
  InitializeConfig,
  InitializeUser,
  MintContentAsNft,
  SubmitContent,
}

export function identifyMintCraftNftProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MintCraftNftProgramInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 127, 21, 1, 194, 190, 196, 70])
      ),
      0
    )
  ) {
    return MintCraftNftProgramInstruction.InitializeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([111, 17, 185, 250, 60, 122, 38, 254])
      ),
      0
    )
  ) {
    return MintCraftNftProgramInstruction.InitializeUser;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 232, 87, 202, 11, 234, 193, 128])
      ),
      0
    )
  ) {
    return MintCraftNftProgramInstruction.MintContentAsNft;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([83, 67, 55, 88, 192, 77, 115, 15])
      ),
      0
    )
  ) {
    return MintCraftNftProgramInstruction.SubmitContent;
  }
  throw new Error(
    'The provided instruction could not be identified as a mintCraftNftProgram instruction.'
  );
}

export type ParsedMintCraftNftProgramInstruction<
  TProgram extends string = 'BrrVsyYH1Ght4cZwZYuWNY7659skft5wYHYrxPndgKQv',
> =
  | ({
      instructionType: MintCraftNftProgramInstruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: MintCraftNftProgramInstruction.InitializeUser;
    } & ParsedInitializeUserInstruction<TProgram>)
  | ({
      instructionType: MintCraftNftProgramInstruction.MintContentAsNft;
    } & ParsedMintContentAsNftInstruction<TProgram>)
  | ({
      instructionType: MintCraftNftProgramInstruction.SubmitContent;
    } & ParsedSubmitContentInstruction<TProgram>);
